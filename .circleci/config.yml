---
version: 2.1
jobs:
    build-and-send:
        docker:
                - image: python:3.8
        steps:
          - checkout
          - run:
                name: Installation des prérequis
                command: |
                    apt-get update
                    apt-get install -y zip lftp
          - run:
                name : Récupération des données ProPilot
                command: |
                    echo "$DFAKTO_PK_BASE64" | base64 -d > dfakto.key
                    chmod 400 dfakto.key
                    chmod 777 ssh_askpass.sh
                    DISPLAY=1 SSH_ASKPASS="./ssh_askpass.sh" ssh-add dfakto.key < /dev/null
                    #ssh-keyscan -H ${DFAKTO_URL} >> ~/.ssh/known_hosts
                    mkdir data && cd data
                    sftp -o StrictHostKeychecking=no -P ${DFAKTO_PORT} -i ../dfakto.key ${USER_NAME}@${DFAKTO_URL} \<<EOF
                    cd files
                    get *.csv
                    exit
          - run:
                name: Installation des requirements Python
                command: |
                    pip3 install -r requirements.txt
                    python -m ipykernel install --user
          - run:
                name: Chargement des données ProPilot
                no_output_timeout: 1h
                command: |
                    jupyter nbconvert --to python chargement_propilot.ipynb
                    python chargement_propilot.py
                    FILE=pp_dep.csv
                    if test -f "$FILE"; then
                        echo "$FILE successfuly created."
                    fi
          - run:
                name: Production des fiches parlementaires
                no_output_timeout: 1h
                command: |
                    jupyter nbconvert --to python build_reports.ipynb
                    python build_reports.py
                    #zip -9 archive.zip *.pdf
                    #git add archive.zip
                    cd reports_word
                    git add Suivi*.docx
                    git config --global  user.email "circleci@circleci"
                    git config --global user.name "CircleCI"
                    git commit -m "add new docx reports [ci skip]"
                    git push --set-upstream origin $CIRCLE_BRANCH
          - run:
                name: Export des données en format csv
                no_output_timeout: 1h
                command: |
                    jupyter nbconvert --to python export_csv.ipynb
                    python export_csv.py
                    FILES=exports/*.csv
                    for f in $FILES
                      do

                      echo "Sending $f"

                      if test -f "$f"; then
                              echo "$f successfuly created."
                      else
                              echo "$f not found"
                              ls .
                      fi

                      lftp -u ${DEPLOY_USER}:${DEPLOY_PASSWORD} ${DEPLOY_HOST} -e "set ftp:ssl-force true ; cd propilot ; put $f ; quit"
                      if [ $? -eq 0 ]; then
                              echo "$f successfuly transfered."
                      fi
                      done
workflows:
  version: 2.1
  main:
    jobs:
      - build-and-send

  daily:
    jobs:
      - build-and-send
    triggers:
      - schedule:
          cron: 0 6 * * 2,3,4,5,6
          filters:
            branches:
              only:
                - master
